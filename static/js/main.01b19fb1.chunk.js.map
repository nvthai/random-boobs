{"version":3,"sources":["logo.svg","loading-balls.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomBoobs","setState","fetchingBoobs","fetch","concat","process","then","response","json","boobs_url","pathOr","console","log","catch","error","boobsLoaded","state","react_default","a","createElement","className","src","alt","onLoad","onClick","require","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8KCgFzBC,2BAxEd,SAAAA,EAAcC,GAAQ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACrBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAOJ,KAWRQ,YAAc,WACbP,EAAKQ,SAAU,CAAEC,eAAe,IAChCC,MAAK,gDAAAC,OAAmDC,mCAAnD,wBACHC,KAAM,SAAAC,GACN,OAAOA,EAASC,SAEhBF,KAAM,SAAAE,GACN,IAAMC,EAAYC,YAAQ,qCAAsC,CAAE,OAAQ,aAAeF,GACzFG,QAAQC,IAAK,eAAgB,gCAAiCH,GAC9DhB,EAAKQ,SAAU,CAAEQ,gBAEjBI,MAAO,SAAAC,GACPH,QAAQC,IAAK,WAAY,gCAAiCE,GAC1DrB,EAAKQ,SAAU,CACdC,eAAe,OA1BGT,EA+BtBsB,YAAc,WACbtB,EAAKQ,SAAU,CAAEC,eAAe,KA9BhCT,EAAKuB,MAAQ,CACZd,eAAe,EACfO,UAAW,0DAJShB,oFASrBG,KAAKI,+CA2BL,OACCiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,kBAGDH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,gEAGAH,EAAAC,EAAAC,cAAA,uCAIAF,EAAAC,EAAAC,cAAA,OACCE,IAAKzB,KAAKoB,MAAMP,UAChBa,IAAI,6BACJF,UAAU,QACVG,OAAQ3B,KAAKmB,YACbS,QAAS5B,KAAKI,cAIdJ,KAAKoB,MAAMd,eACXe,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OACCE,IAAKI,EAAS,IACdH,IAAI,KAELL,EAAAC,EAAAC,cAAA,yCAjEYO,cCGZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT5B,KAAK,SAAAgC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxB,QACfmB,UAAUC,cAAcO,WAK1BhC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjE8B,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAI5C,gBAAwBwB,OAAOC,UAC3CoB,SAAWrB,OAAOC,SAASoB,OAIvC,OAGFrB,OAAOsB,iBAAiB,OAAQ,WAC9B,IAAMjB,EAAK,GAAA9B,OAAMC,gBAAN,sBAENsB,EAwCX,SAAiCO,GAE/B/B,MAAM+B,GACH5B,KAAK,SAAAC,GAGkB,MAApBA,EAAS6C,SACuD,IAAhE7C,EAAS8C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CpB,UAAUC,cAAcoB,MAAMlD,KAAK,SAAAgC,GACjCA,EAAamB,aAAanD,KAAK,WAC7BuB,OAAOC,SAAS4B,aAKpBzB,EAAgBC,KAGnBrB,MAAM,WACLF,QAAQC,IACN,mEAzDA+C,CAAwBzB,GAHxBD,EAAgBC,MC7BxB0B","file":"static/js/main.01b19fb1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading-balls.d80ea8c6.svg\";","import React, { Component } from 'react'\nimport 'whatwg-fetch'\nimport { pathOr } from 'ramda'\n// eslint-disable-next-line\nimport logo from './logo.svg'\nimport './App.css'\n\nclass App extends Component {\n\tconstructor ( props ) {\n\t\tsuper( props )\n\t\tthis.state = {\n\t\t\tfetchingBoobs: true,\n\t\t\tboobs_url: \"https://media1.giphy.com/media/cwHQOWenYfnQA/giphy.gif\"\n\t\t}\n\t}\n\n\tcomponentWillMount () {\n\t\tthis.randomBoobs()\n\t}\n\n\trandomBoobs = () => {\n\t\tthis.setState( { fetchingBoobs: true } )\n\t\tfetch( `https://api.giphy.com/v1/gifs/random?api_key=${ process.env.REACT_APP_GIPHY_KEY }&tag=boobs&rating=R` )\n\t\t\t.then( response => {\n\t\t\t\treturn response.json()\n\t\t\t} )\n\t\t\t.then( json => {\n\t\t\t\tconst boobs_url = pathOr( 'http://via.placeholder.com/350x150', [ 'data', 'image_url' ], json )\n\t\t\t\tconsole.log( '%c boobs_url', 'background: red; color: white', boobs_url )\n\t\t\t\tthis.setState( { boobs_url } )\n\t\t\t} )\n\t\t\t.catch( error => {\n\t\t\t\tconsole.log( '%c error', 'background: red; color: white', error )\n\t\t\t\tthis.setState( {\n\t\t\t\t\tfetchingBoobs: false\n\t\t\t\t} )\n\t\t\t} )\n\t}\n\n\tboobsLoaded = () => {\n\t\tthis.setState( { fetchingBoobs: false } )\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1 className=\"App-title\">Random (.)(.)</h1>\n\t\t\t\t</header>\n\n\t\t\t\t<p className=\"App-intro\">\n\t\t\t\t\tWe all know woman (.)(.) make this world more interesting ;)\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tTouch on (.)(.) and enjoy!\n        </p>\n\n\t\t\t\t<img\n\t\t\t\t\tsrc={this.state.boobs_url}\n\t\t\t\t\talt=\"Click to random new (.)(.)\"\n\t\t\t\t\tclassName='Boobs'\n\t\t\t\t\tonLoad={this.boobsLoaded}\n\t\t\t\t\tonClick={this.randomBoobs}\n\t\t\t\t/>\n\n\t\t\t\t{\n\t\t\t\t\tthis.state.fetchingBoobs &&\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={require( './loading-balls.svg' )}\n\t\t\t\t\t\t\talt=''\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p>Boobs is coming ...</p>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}